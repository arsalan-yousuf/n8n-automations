{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "6356b0fe-1b92-4510-9410-ffcf19111818",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1000,
        580
      ],
      "webhookId": "5b04dea3-1a5d-4ac5-9866-8d3af35e9e7f"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.deepseek.com/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messages\": [\n    {\n      \"content\": \"You are a helpful assistant who is tasked with creating a step by step plan of action for a personal assistant\",\n      \"role\": \"system\"\n    },\n    {\n      \"content\": \"{{ $json.chatInput }}{{ $now }}\",\n      \"role\": \"user\"\n    }\n  ],\n  \"model\": \"deepseek-chat\",\n  \"frequency_penalty\": 0,\n  \"max_tokens\": 2048,\n  \"presence_penalty\": 0,\n  \"response_format\": {\n    \"type\": \"text\"\n  },\n  \"stop\": null,\n  \"stream\": false,\n  \"stream_options\": null,\n  \"temperature\": 1,\n  \"top_p\": 1,\n  \"tools\": null,\n  \"tool_choice\": \"none\",\n  \"logprobs\": false,\n  \"top_logprobs\": null\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -780,
        580
      ],
      "id": "c4689c94-4310-42c6-87fb-86a5cc30a509",
      "name": "DeepSeek R1 Planner"
    },
    {
      "parameters": {
        "model": "deepseek-reasoner",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -920,
        360
      ],
      "id": "dab796ac-f297-4fc0-96c3-83ae098a1166",
      "name": "DeepSeek Chat Model",
      "credentials": {
        
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -540,
        360
      ],
      "id": "29109970-cc0f-4e42-bd49-d3de395d444f",
      "name": "DeepSeek Chat Model1",
      "credentials": {
        
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -780,
        360
      ],
      "id": "8b1eb445-266a-4ce0-8a46-e5d10f0effe8",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.choices[0].message.content }}",
        "options": {
          "systemMessage": "You are a helpful assistant.\nMake sure the timezone of calendar event matches with the time mentioned in the email"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -520,
        580
      ],
      "id": "988f83bc-12af-4162-a6c3-545628b3ad6f",
      "name": "Tools Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        -600,
        760
      ],
      "id": "f56b573c-7561-4f6f-9446-923ee090bf4f",
      "name": "DeepSeek Chat Model2",
      "credentials": {
        
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=** Mission **\nYou are an AI tasked with drafting clear, practical prompts that help a personal assistant complete any job at hand.\n\n** Operating Scope **\n\n- No external tools or references.\n- Keep every instruction brief, ordered, and unmistakable.\n- Jobs can be simple or complex, but your wording must remain straightforward.\n\n** Workflow **\n\n- Receive the user’s request.\n- Decompose the request into a short series of logical actions.\n- Write each action so it can be executed immediately—no guesswork.\n- Note prerequisites or context the assistant needs to know.\n- Proof-read the prompt for clarity and fullness before sending it.\n\n\n** Illustrative Scenarios **\n\nExample 1:\n\n--------User Request\n“Book a doctor’s appointment for next week.”\n\n--------Prompt You Produce\n1. Find open slots with the doctor next week. 2. Pick a time that doesn’t clash with existing events. 3. Book the slot by phone or online. 4. Confirm and add the appointment to the calendar.\n\nExample 2:\n\n--------User Request\n“Get ready for John’s birthday party.”\t\n\n--------Prompt You Produce\n1. Select a date and time for the party. 2. Draft a guest list. 3. Buy and set up decorations beforehand. 4. Arrange food and drinks. 5. Send invitations and track RSVPs.\n\n\n** Operating Checklist (SOP) **\n\n- Hear the goal.\n- Break it into clear, ordered, actionable steps.\n- Supply any needed background details.\n- Double-check that the plan is complete and plain.\n- Deliver the polished prompt to the assistant.\n\n\n** Closing Reminders **\n- Favor simplicity over flourish.\n- Omit anything irrelevant or overly wordy.\n- Hand over a ready-to-execute plan that needs no further clarification.\n- Current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -880,
        140
      ],
      "id": "30efcc72-1f42-413f-85f8-d517948c9a69",
      "name": "Planner AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -520,
        140
      ],
      "id": "34918c3e-bd63-4da1-a83b-c0695f1396c3",
      "name": "Executive AI Agent"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('EmailAdress') }}",
        "subject": "={{ $fromAI('EmailSubject') }}",
        "emailType": "text",
        "message": "={{ $fromAI('Message') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -400,
        360
      ],
      "id": "aa33a161-c56b-4702-a1c5-e9b0909434a2",
      "name": "Send a message in Gmail",
      "webhookId": "324c1a9d-1e66-4536-b283-5dea2ae925e4",
      "credentials": {
        
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('EmailAdress') }}",
        "subject": "={{ $fromAI('EmailSubject') }}",
        "emailType": "text",
        "message": "={{ $fromAI('Message') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -480,
        760
      ],
      "id": "c96fd959-9d21-46e8-a22f-b4501e5fbba9",
      "name": "Send a message in Gmail1",
      "webhookId": "324c1a9d-1e66-4536-b283-5dea2ae925e4",
      "credentials": {
        
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "arsalan98y@gmail.com",
          "mode": "list",
          "cachedResultName": "arsalan98y@gmail.com"
        },
        "start": "={{ $fromAI('startDate') }}",
        "end": "={{ $fromAI('endDate') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -260,
        360
      ],
      "id": "ad08b9fb-0145-4d04-a20a-c2390f7678ce",
      "name": "Create an event in Google Calendar",
      "credentials": {
        
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "arsalan98y@gmail.com",
          "mode": "list",
          "cachedResultName": "arsalan98y@gmail.com"
        },
        "start": "={{ $fromAI('startDate').replace('T', ' ') }}",
        "end": "={{ $fromAI('endDate').replace('T', ' ') }}",
        "additionalFields": {
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -360,
        760
      ],
      "id": "fa790ff9-7a8f-40e6-92c2-36e73c4ac007",
      "name": "Create an event in Google Calendar1",
      "credentials": {
        
      }
    }
  ],
  "pinData": {
    "Planner AI Agent": [
      {
        "json": {
          "output": "### Prompt for Assistant\n1. **Check the user's calendar** for available 30-minute slots between 9:00 AM and 7:00 PM, Monday to Friday, over the next 7 days (2025-07-23 to 2025-07-29). Exclude weekends (Saturday/Sunday) and any conflicting events.  \n2. **Select the earliest feasible slot** that fits the criteria (e.g., \"July 24, 10:00 AM - 10:30 AM\").  \n3. **Draft an email to Arsalan Yousuf** (arsalan98y@gmail.com):  \n   - **Subject**: \"Meeting Request - [Your Name]\"  \n   - **Body**:  \n     > \"Hi Arsalan,  \n     > Could we schedule a 30-minute meeting on **[Proposed Date]** at **[Proposed Start Time]**?  \n     > If this doesn’t work, please suggest an alternative between 9 AM–7 PM next weekday (Mon–Fri).  \n     > Best regards,  \n     > [Your Name]\"  \n4. **Send the email** and await Arsalan’s response.  \n5. **Upon confirmation from Arsalan**:  \n   - Add the meeting to the user’s calendar.  \n   - Send a follow-up confirmation email to Arsalan with details (date/time, calendar invite if applicable).  \n\n### Notes  \n- **Timezone**: Use the user’s local time zone (specify if drafting email, e.g., \"IST\").  \n- **Contingency**: If Arsalan suggests a new time, re-check the user’s calendar and repeat steps 3–5.  \n- **No weekends**: Strictly avoid Saturday/Sunday.  \n- **Confirmation email**: Include finalized time/location/virtual link if relevant."
        }
      }
    ]
  },
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "DeepSeek R1 Planner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek R1 Planner": {
      "main": [
        [
          {
            "node": "Tools Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Planner AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Executive AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Planner AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Tools Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Planner AI Agent": {
      "main": [
        [
          {
            "node": "Executive AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message in Gmail": {
      "ai_tool": [
        [
          {
            "node": "Executive AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send a message in Gmail1": {
      "ai_tool": [
        [
          {
            "node": "Tools Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create an event in Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "Executive AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create an event in Google Calendar1": {
      "ai_tool": [
        [
          {
            "node": "Tools Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0752189b-0058-484f-abd1-9f5e0b449125",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6144a66e82fa63004265646e395e1dab115184480d34e9ec419eaf1921a90052"
  },
  "id": "aPkOypsGwCKSqSAE",
  "tags": []
}